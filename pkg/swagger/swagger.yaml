basePath: /
definitions:
  models.AuthError:
    properties:
      error:
        example: Authentication Failed
        type: string
      message:
        example: Invalid email or password
        type: string
    type: object
  models.ConflictError:
    properties:
      error:
        example: Conflict
        type: string
      message:
        example: Email already exists
        type: string
    type: object
  models.ForbiddenError:
    properties:
      error:
        example: Forbidden
        type: string
      message:
        example: Insufficient permissions
        type: string
    type: object
  models.InternalServerError:
    properties:
      error:
        example: Internal Server Error
        type: string
      message:
        example: An unexpected error occurred
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      totp_code:
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    properties:
      expires_at:
        type: string
      requires_2fa:
        type: boolean
      token:
        type: string
      user:
        $ref: '#/definitions/models.UserPublic'
    type: object
  models.LoginSuccessResponse:
    properties:
      data:
        $ref: '#/definitions/models.LoginResponse'
      message:
        example: Login successful
        type: string
    type: object
  models.LogoutSuccessResponse:
    properties:
      message:
        example: Logged out successfully
        type: string
    type: object
  models.NotFoundError:
    properties:
      error:
        example: Not Found
        type: string
      message:
        example: Resource not found
        type: string
    type: object
  models.ProfileSuccessResponse:
    properties:
      data:
        $ref: '#/definitions/models.UserPublic'
      message:
        example: Profile retrieved successfully
        type: string
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.RegisterRequest:
    properties:
      date_of_birth:
        type: string
      email:
        type: string
      nickname:
        maxLength: 32
        minLength: 3
        type: string
      password:
        minLength: 8
        type: string
    required:
    - date_of_birth
    - email
    - nickname
    - password
    type: object
  models.RegisterSuccessResponse:
    properties:
      data:
        $ref: '#/definitions/models.UserPublic'
      message:
        example: User registered successfully
        type: string
    type: object
  models.TooManyRequestsError:
    properties:
      error:
        example: Too Many Requests
        type: string
      message:
        example: Rate limit exceeded
        type: string
    type: object
  models.UnauthorizedError:
    properties:
      error:
        example: Unauthorized
        type: string
      message:
        example: Authentication required
        type: string
    type: object
  models.UserPublic:
    properties:
      created_at:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      enabled_2fa:
        type: boolean
      id:
        type: integer
      nickname:
        type: string
      updated_at:
        type: string
    type: object
  models.ValidationErrorDetail:
    properties:
      field:
        example: email
        type: string
      message:
        example: This field is required
        type: string
      tag:
        example: required
        type: string
      value:
        example: ""
        type: string
    type: object
  models.ValidationErrorResponse:
    properties:
      details:
        items:
          $ref: '#/definitions/models.ValidationErrorDetail'
        type: array
      error:
        example: Validation Failed
        type: string
      message:
        example: The request contains invalid data
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API pentru aplica»õia Iivineri
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Iivineri API
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Returns basic information about the API
      produces:
      - application/json
      responses:
        "200":
          description: API information
          schema:
            additionalProperties: true
            type: object
      summary: Get API information
      tags:
      - health
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password, optionally with 2FA
        code
      parameters:
      - description: User login credentials (include totp_code if 2FA enabled)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful - returns JWT token and user profile
          schema:
            $ref: '#/definitions/models.LoginSuccessResponse'
        "400":
          description: Validation error - invalid input data
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "401":
          description: Authentication failed - invalid credentials or 2FA code
          schema:
            $ref: '#/definitions/models.AuthError'
        "403":
          description: Account banned or disabled
          schema:
            $ref: '#/definitions/models.ForbiddenError'
        "429":
          description: Too many login attempts
          schema:
            $ref: '#/definitions/models.TooManyRequestsError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerError'
      summary: User authentication
      tags:
      - auth
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout current user session and invalidate the current session
      produces:
      - application/json
      responses:
        "200":
          description: Session logged out successfully
          schema:
            $ref: '#/definitions/models.LogoutSuccessResponse'
        "401":
          description: Authentication required - invalid or missing token
          schema:
            $ref: '#/definitions/models.UnauthorizedError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerError'
      security:
      - BearerAuth: []
      summary: Logout current session
      tags:
      - auth
  /api/v1/auth/profile:
    get:
      consumes:
      - application/json
      description: Retrieve current authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: Profile retrieved successfully
          schema:
            $ref: '#/definitions/models.ProfileSuccessResponse'
        "401":
          description: Authentication required - invalid or missing token
          schema:
            $ref: '#/definitions/models.UnauthorizedError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.NotFoundError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerError'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate new access token using valid refresh token
      parameters:
      - description: Refresh token data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully - returns new access token
          schema:
            $ref: '#/definitions/models.LoginSuccessResponse'
        "400":
          description: Validation error - invalid refresh token format
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "401":
          description: Authentication failed - invalid or expired refresh token
          schema:
            $ref: '#/definitions/models.AuthError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerError'
      summary: Refresh access token
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with validation and return user profile
      parameters:
      - description: 'User registration data (date_of_birth format: YYYY-MM-DD)'
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/models.RegisterSuccessResponse'
        "400":
          description: Validation error - invalid input data
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "409":
          description: Conflict - email or nickname already exists
          schema:
            $ref: '#/definitions/models.ConflictError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerError'
      summary: Register a new user account
      tags:
      - auth
  /health:
    get:
      consumes:
      - application/json
      description: Returns the health status of the API and its dependencies
      produces:
      - application/json
      responses:
        "200":
          description: Health check passed
          schema:
            additionalProperties: true
            type: object
        "503":
          description: Service unavailable
          schema:
            additionalProperties: true
            type: object
      summary: Health check endpoint
      tags:
      - health
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
